scale_fill_manual(values = c("#F18099", "#4898D2")) +
coord_flip() +
ylim(-6,6) +
ylab("log odds ratio (Beyoncé/Taylor Swift)") +
theme_minimal() +
theme(
plot.margin = margin(10, 45, 20, 45),
plot.background = element_rect(fill = "#FBFDFC", color = NA),
plot.subtitle = element_text(size = 18, family = "Noto Sans", face = "bold", colour = "#8F7E84", hjust = 0.5, margin = margin(15,0,15,0)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 10, family = "Noto Sans", face = "bold", colour = "#8F7E84")) +
draw_image(swift, scale=15, y=2.8, x=9) +
draw_image(beyonce, scale=12, y=-4, x=27)
beyonce <- image_transparent(beyonce, "#F18099", fuzz = 100)
clean.lyrics %>%
count(word, artist, sort = TRUE) %>%
pivot_wider(names_from = artist, values_from = n) %>%
mutate(logratio = log(Beyoncé/`Taylor Swift`)) %>%
arrange(desc(logratio)) %>%
group_by(logratio < 0) %>%
top_n(15, abs(logratio)) %>%
ungroup() %>%
mutate(word = reorder(word, logratio)) %>%
ggplot(aes(word, logratio, fill = logratio < 0)) +
geom_col(show.legend = FALSE) +
labs(subtitle = "WHO SAID WHAT?") +
scale_fill_manual(values = c("#F18099", "#4898D2")) +
coord_flip() +
ylim(-6,6) +
ylab("log odds ratio (Beyoncé/Taylor Swift)") +
theme_minimal() +
theme(
plot.margin = margin(10, 45, 20, 45),
plot.background = element_rect(fill = "#FBFDFC", color = NA),
plot.subtitle = element_text(size = 18, family = "Noto Sans", face = "bold", colour = "#8F7E84", hjust = 0.5, margin = margin(15,0,15,0)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 10, family = "Noto Sans", face = "bold", colour = "#8F7E84")) +
draw_image(swift, scale=15, y=2.8, x=9) +
draw_image(beyonce, scale=12, y=-4, x=27)
beyonce <- image_transparent(beyonce, "#F18099", fuzz = 50)
function (path, density = NULL, depth = NULL, strip = FALSE,
defines = NULL)
{
if (is.numeric(density))
density <- paste0(density, "x", density)
density <- as.character(density)
depth <- as.integer(depth)
defines <- validate_defines(defines)
image <- if (isS4(path) && methods::is(path, "Image")) {
convert_EBImage(path)
}
else if (inherits(path, "nativeRaster") || (is.matrix(path) &&
is.integer(path))) {
image_read_nativeraster(path)
}
else if (inherits(path, "cimg")) {
image_read_cimg((path))
}
else if (grDevices::is.raster(path)) {
image_read_raster2(path)
}
else if (is.matrix(path) && is.character(path)) {
image_read_raster2(grDevices::as.raster(path))
}
else if (is.array(path)) {
image_readbitmap(path)
}
else if (is.raw(path)) {
magick_image_readbin(path, density, depth, strip, defines)
}
else if (is.character(path) && all(nchar(path))) {
path <- vapply(path, replace_url, character(1))
magick_image_readpath(enc2native(path), density, depth,
strip, defines)
}
else {
stop("path must be URL, filename or raw vector")
}
if (is.character(path) && !isTRUE(magick_config()$rsvg)) {
if (any(grepl("\\.svg$", tolower(path))) || any(grepl("svg|mvg",
tolower(image_info(image)$format)))) {
warning("ImageMagick was built without librsvg which causes poor qualty of SVG rendering.\nFor better results use image_read_svg() which uses the rsvg package.",
call. = FALSE)
}
}
return(image)
}
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_transparent(beyonce, "#F18099", fuzz = 50)
clean.lyrics %>%
count(word, artist, sort = TRUE) %>%
pivot_wider(names_from = artist, values_from = n) %>%
mutate(logratio = log(Beyoncé/`Taylor Swift`)) %>%
arrange(desc(logratio)) %>%
group_by(logratio < 0) %>%
top_n(15, abs(logratio)) %>%
ungroup() %>%
mutate(word = reorder(word, logratio)) %>%
ggplot(aes(word, logratio, fill = logratio < 0)) +
geom_col(show.legend = FALSE) +
labs(subtitle = "WHO SAID WHAT?") +
scale_fill_manual(values = c("#F18099", "#4898D2")) +
coord_flip() +
ylim(-6,6) +
ylab("log odds ratio (Beyoncé/Taylor Swift)") +
theme_minimal() +
theme(
plot.margin = margin(10, 45, 20, 45),
plot.background = element_rect(fill = "#FBFDFC", color = NA),
plot.subtitle = element_text(size = 18, family = "Noto Sans", face = "bold", colour = "#8F7E84", hjust = 0.5, margin = margin(15,0,15,0)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 10, family = "Noto Sans", face = "bold", colour = "#8F7E84")) +
draw_image(swift, scale=15, y=2.8, x=9) +
draw_image(beyonce, scale=12, y=-4, x=27)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
plot(beyonce)
beyonce <- image_background(beyonce, "#F18099", flatten = TRUE)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_background(beyonce, "#F18099", flatten = TRUE)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_background(beyonce, "#F18099", flatten = FALSE)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_colorize(beyonce, opacity, "#F18099")
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_colorize(beyonce, 20, "#F18099")
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_colorize(beyonce, 50, "#F18099")
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_colorize(beyonce, 99, "#F18099")
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_colorize(beyonce, 75, "#F18099")
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_contrast(beyonce, sharpen = 1)
plot(beyonce)
beyonce <- image_contrast(beyonce, sharpen = 0.5)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_contrast(beyonce, sharpen = 0.5)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_contrast(beyonce, sharpen = 20)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_transparent(beyonce, "white")
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_transparent(beyonce, "white")
beyonce <- image_colorize(beyonce, 100, "#4898D2")
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_transparent(beyonce, "white", fuzz = 100)
beyonce <- image_colorize(beyonce, 100, "#4898D2")
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_transparent(beyonce, "white", fuzz = 0)
beyonce <- image_colorize(beyonce, 100, "#4898D2")
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
plot(beyonce)
beyonce <- image_quantize(beyonce, max = 2, colorspace = "rgb", dither = NULL,  treedepth = NULL)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_quantize(beyonce, max = 1, colorspace = "rgb", dither = NULL,  treedepth = NULL)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_quantize(beyonce, max = 2, colorspace = "rgb", dither = NULL,  treedepth = NULL)
plot(beyonce)
beyonce <- image_colorize(beyonce, 100, "#4898D2")
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_colorize(beyonce, 50, "#4898D2")
plot(beyonce)
clean.lyrics %>%
count(word, artist, sort = TRUE) %>%
pivot_wider(names_from = artist, values_from = n) %>%
mutate(logratio = log(Beyoncé/`Taylor Swift`)) %>%
arrange(desc(logratio)) %>%
group_by(logratio < 0) %>%
top_n(15, abs(logratio)) %>%
ungroup() %>%
mutate(word = reorder(word, logratio)) %>%
ggplot(aes(word, logratio, fill = logratio < 0)) +
geom_col(show.legend = FALSE) +
labs(subtitle = "WHO SAID WHAT?") +
scale_fill_manual(values = c("#F18099", "#4898D2")) +
coord_flip() +
ylim(-6,6) +
ylab("log odds ratio (Beyoncé/Taylor Swift)") +
theme_minimal() +
theme(
plot.margin = margin(10, 45, 20, 45),
plot.background = element_rect(fill = "#FBFDFC", color = NA),
plot.subtitle = element_text(size = 18, family = "Noto Sans", face = "bold", colour = "#8F7E84", hjust = 0.5, margin = margin(15,0,15,0)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 10, family = "Noto Sans", face = "bold", colour = "#8F7E84")) +
draw_image(swift, scale=15, y=2.8, x=9) +
draw_image(beyonce, scale=12, y=-4, x=27)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_modulate(beyonce, brightness = 100, saturation = 100, hue = 100)
plot(beyonce)
beyonce <- image_modulate(beyonce, brightness = 1, saturation = 100, hue = 100)
plot(beyonce)
beyonce <- image_modulate(beyonce, brightness = 100, saturation = 100, hue = 100)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_modulate(beyonce, brightness = 100, saturation = 100, hue = 100)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_modulate(beyonce, brightness = 100, saturation = 1, hue = 100)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_modulate(beyonce, brightness = 100, saturation = 100, hue = 1)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_contrast(beyonce, sharpen = 1)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_contrast(beyonce, sharpen = 100)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
beyonce <- image_contrast(beyonce, sharpen = 50)
plot(beyonce)
beyonce <- image_read("https://snappygoat.com/b/bd5649cbcfae5a3e7040e3c37d47ff1e21f4d539")
plot(beyonce)
clean.lyrics %>%
count(word, artist, sort = TRUE) %>%
group_by(artist) %>%
top_n(5) %>%
ungroup() %>%
ggplot(aes(reorder_within(word, n, artist), n,
fill = artist)) +
geom_col(alpha = 0.8, show.legend = FALSE) +
geom_text(aes(label = n, hjust = 1.2, family = "Noto Sans"), size = 5, color = "white") +
scale_x_reordered() +
coord_flip() +
facet_wrap(~artist, scales = "free") +
scale_y_continuous(expand = c(0, 0)) +
labs(x = NULL, y = "Word count",
title = "Beyoncé or Taylor Swift?",
subtitle = "TOP 5 MOST FREQUENT SONGWORDS") +
scale_fill_manual(values = c("#F18099", "#4898D2")) +
theme_minimal() +
theme(plot.margin = margin(30, 45, 25, 45),
plot.background = element_rect(fill = "#FBFDFC", color = NA),
plot.title = element_text(size = 60, family = "Noto Sans", face = "bold", hjust = 0.5, colour = "#8E4F9A", margin = margin(20,0,50,0)),
plot.subtitle = element_text(size = 18, family = "Noto Sans", face = "bold", colour = "#8F7E84", hjust = 0.5, margin = margin(0,0,15,0)),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 12, family = "Noto Sans", face = "bold", colour = "#8F7E84"),
axis.text.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_text(size = 10, family = "Noto Sans", face = "bold", colour = "#8F7E84"))
clean.lyrics %>%
count(word, artist, sort = TRUE) %>%
pivot_wider(names_from = artist, values_from = n) %>%
mutate(logratio = log(Beyoncé/`Taylor Swift`)) %>%
arrange(desc(logratio)) %>%
group_by(logratio < 0) %>%
top_n(15, abs(logratio)) %>%
ungroup() %>%
mutate(word = reorder(word, logratio)) %>%
ggplot(aes(word, logratio, fill = logratio < 0)) +
geom_col(show.legend = FALSE) +
labs(subtitle = "WHO SAID WHAT?") +
scale_fill_manual(values = c("#F18099", "#4898D2")) +
coord_flip() +
ylim(-6,6) +
ylab("log odds ratio (Beyoncé/Taylor Swift)") +
theme_minimal() +
theme(
plot.margin = margin(10, 45, 20, 45),
plot.background = element_rect(fill = "#FBFDFC", color = NA),
plot.subtitle = element_text(size = 18, family = "Noto Sans", face = "bold", colour = "#8F7E84", hjust = 0.5, margin = margin(15,0,15,0)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 10, family = "Noto Sans", face = "bold", colour = "#8F7E84")) +
draw_image(swift, scale=15, y=2.8, x=9) +
draw_image(beyonce, scale=12, y=-4, x=27)
knitr::opts_chunk$set(echo = TRUE)
library(psych) ### load the listed package
library(psych) ### load the listed package
library(geomorph) ### load the listed package
library(psych) ### load the listed package
library(geomorph) ### load the listed package
library(tidyverse) ### load the listed package
library(vegan) ### load the listed package
library(MASS) ### load the listed package
library(tidyverse) ### load the listed package
library(vegan) ### load the listed package
library(MASS) ### load the listed package
library(cowplot) ### load the listed package
library(ggpubr) ### load the listed package
library(LaMBDA) ### load the listed package
library(rio) ### load the listed package
knitr::opts_chunk$set(echo = TRUE)
library(psych) ### load the listed package
library(psych) ### load the listed package
library(geomorph) ### load the listed package
library(tidyverse) ### load the listed package
library(geomorph) ### load the listed package
library(tidyverse) ### load the listed package
library(vegan) ### load the listed package
library(MASS) ### load the listed package
library(cowplot) ### load the listed package
library(ggpubr) ### load the listed package
library(ggpubr) ### load the listed package
library(LaMBDA) ### load the listed package
library(rio) ### load the listed package
landmarks_elongated <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/landmarks_elongated.rds")
landmarks_handaxe <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/landmarks_handaxe.rds")
landmarks_tanged <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/landmarks_tanged.rds")
shape_data_elongated <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/shape_data_elongated.rds")
shape_data_tanged <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/shape_data_tanged.rds")
shape_data_handaxe <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/shape_data_handaxe.rds")
metric_data <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/metric_data.rds")
digitisation_error_landmarks <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/digitisation_error_landmarks.rds")
digitisation_error_landmarks_data <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/digitisation_error_landmarks_data.rds")
digitisation_error_metrics <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/digitisation_error_metrics.rds")
shape_data_sliders <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/shape_data_sliders.rds")
ggplot(elongated_ds) +
geom_point(aes(x = PC1, y = PC2, colour = Artefact, shape = Class), size = 2) +
labs(x = "Principal Component 1 (45.816%)", y = "Principal Component 2 (24.298%)", shape = "Method/skill", colour = "Artefact") +
scale_color_manual(values=c("#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00")) +
scale_shape_manual(values=c(17,15,3,16)) +
theme_minimal() ### figure 5 creation
landmarks_elongated <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/landmarks_elongated.rds")
landmarks_handaxe <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/landmarks_handaxe.rds")
landmarks_tanged <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/landmarks_tanged.rds")
shape_data_elongated <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/shape_data_elongated.rds")
shape_data_tanged <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/shape_data_tanged.rds")
shape_data_handaxe <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/shape_data_handaxe.rds")
metric_data <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/metric_data.rds")
digitisation_error_landmarks <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/digitisation_error_landmarks.rds")
digitisation_error_landmarks_data <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/digitisation_error_landmarks_data.rds")
digitisation_error_metrics <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/digitisation_error_metrics.rds")
shape_data_sliders <- import("https://github.com/CSHoggard/-Lithic_Illustrations/raw/master/shape_data_sliders.rds")
gpa_digi_error <- gpagen(digitisation_error_landmarks, Proj = TRUE, curves =  shape_data_sliders, ProcD = TRUE, surfaces = NULL, print.progress = FALSE) ### formulates a generalised Procrustes analysis (GPA) file for repeated specimens
gpa_digi_error  ### calls the GPA landmark configuration
plot(gpa_digi_error) ### visualisation of the landmark configuration
gpa_digi_error_df <- geomorph.data.frame(gpa_digi_error, attempt = digitisation_error_landmarks_data$Attempt)
gpaprocD <- procD.lm(coords ~ attempt, data = gpa_digi_error_df, print.progress = FALSE) ### ANOVA (coordinates vs. attempt)
summary(gpaprocD) ### summary
gpaprocD$aov.table$SS[1]/gpaprocD$aov.table$SS[3]*100 ### error expressed as a percentage (8.599812%)
head(digitisation_error_metrics)
statsl  <- describe(digitisation_error_metrics$Length_mm) ### descriptive statistics
statsw  <- describe(digitisation_error_metrics$Width_mm) ### descriptive statistics
statssf <- describe(digitisation_error_metrics$Scale_Factor) ### descriptive statistics
(statsl$se/statsl$mean)   * 100 ### fractional uncertainity (length)
(statsw$se/statsw$mean)   * 100 ### fractional uncertainity (width)
(statssf$se/statssf$mean) * 100 ### fractional uncertainity (scale factor: as calibrated through tpsDig2)
head(digitisation_error_metrics)
statsl  <- describe(digitisation_error_metrics$Length_mm) ### descriptive statistics
statsw  <- describe(digitisation_error_metrics$Width_mm) ### descriptive statistics
statssf <- describe(digitisation_error_metrics$Scale_Factor) ### descriptive statistics
(statsl$se/statsl$mean)   * 100 ### fractional uncertainity (length)
(statsw$se/statsw$mean)   * 100 ### fractional uncertainity (width)
(statssf$se/statssf$mean) * 100 ### fractional uncertainity (scale factor: as calibrated through tpsDig2)
gpa_elongated <- gpagen(landmarks_elongated, Proj = TRUE, ProcD = TRUE, curves = shape_data_sliders, surfaces = NULL, print.progress = FALSE) ### gpa (using a procrustes distance criterion): all elongated artefacts
plot(gpa_elongated) ### plots the procrustes coordinates for all elongated artefacts
gpa_tanged <- gpagen(landmarks_tanged, Proj = TRUE, ProcD = TRUE, curves = shape_data_sliders, surfaces = NULL, print.progress = FALSE) ### gpa (procrustes distance criterion): all tanged artefacts
plot(gpa_tanged) ### plots the procrustes coordinates for all tanged artefacts
gpa_handaxe <- gpagen(landmarks_handaxe, Proj = TRUE, ProcD = TRUE, curves = shape_data_sliders, surfaces = NULL, print.progress = FALSE) ### gpa (Procrustes distance criterion): all handaxe artefacts
plot(gpa_handaxe) ### plots the procrustes coordinates for all handaxe artefacts
pca_elongated <- plotTangentSpace(gpa_elongated$coords, cex = 2, warpgrids = FALSE, groups = shape_data_tanged$Artefact, verbose = FALSE) ### pca (geomorph layout)
pca_elongated <- gm.prcomp(gpa_elongated$coords) ### pca (geomorph layout)
pca_elongated$pc.summary ### pca summary
pca_elongated ### pca summary
pca_elongated$x ### pca summary
pca_elongated$shapes ### pca summary
pca_elongated <- gm.prcomp(gpa_elongated$coords) ### pca (geomorph layout)
pca_elongated ### pca summary
elongated_ds <- cbind(shape_data_elongated, pca_elongated$x) ### tidyverse compatible format
View(elongated_ds)
View(elongated_ds)
ggplot(elongated_ds) +
geom_point(aes(x = Comp1, y = Comp2, colour = Artefact, shape = Class), size = 2) +
labs(x = "Principal Component 1 (45.816%)", y = "Principal Component 2 (24.298%)", shape = "Method/skill", colour = "Artefact") +
scale_color_manual(values=c("#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00")) +
scale_shape_manual(values=c(17,15,3,16)) +
theme_minimal() ### figure 5 creation
ggplot(elongated_ds) +
geom_point(aes(x = Comp1, y = Comp2, colour = Artefact, shape = Class), size = 2) +
labs(x = "Principal Component 1 (45.816%)", y = "Principal Component 2 (24.298%)", shape = "Method/skill", colour = "Artefact") +
scale_color_manual(values=c("#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00")) +
scale_shape_manual(values=c(17,15,3,16)) +
theme_minimal() ### figure 5 creation
View(elongated_ds)
pca_elongated <- gm.prcomp(gpa_elongated$coords) ### pca (geomorph layout)
elongated1 <- gpa_elongated$coords[, , 1:18]
df_elongated1 <- geomorph.data.frame(shape = elongated1, class = shape_data_elongated$Class[1:18], artefact = shape_data_elongated$Artefact[1:18])
E1 <- procD.lm(shape ~ class, data = df_elongated1)
?procD.lm
E1 <- procD.lm(shape ~ class, data = df_elongated1, print.progress = FALSE)
summary(E1)
elongated1pcs <- as.data.frame(pca_elongated$x[1:18, 1:10])
elongated1class <- shape_data_elongated$Class[1:18]
elongated1pcs <- cbind(elongated1pcs, elongated1class)
elongated1pcs <- rename(elongated1pcs, Class = elongated1class)
elongated1lda <- lda(Class ~ ., data = elongated1pcs)
elongated1ldapredict <- predict(elongated1lda)
elongated1ldaplot <- cbind(elongated1ldapredict$x[, 1:3], elongated1pcs)
elongated1ldaplotggplot <- ggplot(elongated1ldaplot, aes(LD1, LD2)) +
geom_point(aes(shape = Class), size = 2) +
labs(x = "LDA 1", y = "LDA 2") +
scale_shape_manual(values=c(17,15,3,16)) +
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),  axis.title.y = element_text(size = 6), legend.position = "none",  axis.title.x = element_text(size = 6))
elongated1ldaplotggplot <- ggplot(elongated1ldaplot, aes(LD1, LD2)) +
geom_point(aes(shape = Class), size = 2) +
labs(x = "LDA 1", y = "LDA 2") +
scale_shape_manual(values=c(17,15,3,16)) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size = 6),
axis.title.y = element_text(size = 6),
legend.position = "none")
ggplot(elongated1ldaplot, aes(LD1, LD2)) +
geom_point(aes(shape = Class), size = 2) +
labs(x = "LDA 1", y = "LDA 2") +
scale_shape_manual(values=c(17,15,3,16)) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size = 6),
axis.title.y = element_text(size = 6),
legend.position = "none")
library(tidyverse)
library(tidytext)
library(tidymodels)
library(textrecipes)
library(themis)
library(stopwords)
library(SnowballC)
library(scales)
library(cowplot)
library(extrafont)
library(magick)
library(patchwork)
setwd("C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/Github/-TidyTuesday")
library(here)
beyonce_lyrics <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-29/beyonce_lyrics.csv')
taylor_swift_lyrics <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-29/taylor_swift_lyrics.csv')
View(beyonce_lyrics)
View(taylor_swift_lyrics)
swift <- image_read("https://seeklogo.com/images/T/taylor-swift-silhouette-logo-B5FDD83450-seeklogo.com.png")
plot(swift)
swift <- image_colorize(swift, 100, "#4898D2")
plot(swift)
beyonce <- image_read("https://creazilla-store.fra1.digitaloceanspaces.com/silhouettes/2886/beyonce-silhouette-f44545-md.png")
plot(beyonce)
beyonce <- image_flop(beyonce)
plot(beyonce)
beyonce <- image_colorize(beyonce, 100, "#F18099")
plot(beyonce)
beyonce <- image_colorize(beyonce, 100, "green")
plot(beyonce)
beyonce <- image_colorize(beyonce, 100, "#F18099")
plot(beyonce)
t.lyrics <-
taylor_swift_lyrics %>%
select(artist = Artist, lyrics = Lyrics)
t.lyrics <- taylor_swift_lyrics %>%
select(artist = Artist, lyrics = Lyrics)
library(tidyverse)
library(tidytext)
library(tidymodels)
library(textrecipes)
library(themis)
library(stopwords)
library(SnowballC)
library(scales)
library(cowplot)
library(extrafont)
library(magick)
library(patchwork)
library(here)
t.lyrics <- taylor_swift_lyrics %>%
select(artist = Artist, lyrics = Lyrics)
t.lyrics <- taylor_swift_lyrics %>%
select(Artist, Lyrics)
taylor_swift_lyrics <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-29/taylor_swift_lyrics.csv')
t.lyrics <- taylor_swift_lyrics %>%
select(Artist, Lyrics)
library(tidyverse)
t.lyrics <- taylor_swift_lyrics %>%
select(Artist, Lyrics)
